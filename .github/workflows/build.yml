name: Build Multi-Platform Executables

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ["3.11"]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          brew install pkg-config libffi
        elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0
        fi

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt5 pyinstaller

    - name: Setup Qt environment
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          echo "QT_PLUGIN_PATH=$(python -c 'from PyQt5.QtCore import QLibraryInfo; import sys; print(QLibraryInfo.location(QLibraryInfo.PluginsPath) if hasattr(QLibraryInfo, "location") else QLibraryInfo.path(QLibraryInfo.PluginsPath))')" >> $GITHUB_ENV
        fi

    - name: Embed resources
      run: python embed_resources.py

    - name: Build executable
      timeout-minutes: 20
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          # macOS 使用 onedir 模式
          pyinstaller --onedir --windowed \
            --name HiveToCKConverter \
            --target-arch arm64 \
            --add-data "qt_plugins:qt_plugins" \
            --osx-bundle-identifier "com.example.HiveToCKConverter" \
            app.py
          
          # 重命名输出目录
          mv dist/HiveToCKConverter.app dist/HiveToCKConverter
          
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          pyinstaller --onefile --windowed --name HiveToCKConverter --add-data "qt_plugins;qt_plugins" app.py
        else
          pyinstaller --onefile --name HiveToCKConverter --add-data "qt_plugins:qt_plugins" app.py
        fi

    - name: Create release asset name
      id: asset-name
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "asset_name=HiveToCKConverter-Windows.exe" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          echo "asset_name=HiveToCKConverter-macOS.app" >> $GITHUB_OUTPUT
        else
          echo "asset_name=HiveToCKConverter-Linux" >> $GITHUB_OUTPUT
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.asset-name.outputs.asset_name }}
        path: |
          dist/HiveToCKConverter*
          dist/*.app/**  # macOS 应用包

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_id }}
        name: Release v${{ github.run_id }}
        body: |
          Multi-platform build for:
          - Windows
          - macOS
          - Linux
        files: |
          artifacts/*